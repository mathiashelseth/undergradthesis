FINAL YEAR PROJECT CODE - Bjorn Mathias Helseth

<<A Dangerous Impasse: 
	Identifying how lightweight statistical tests of randomness fail to identify
	Supply Chain Threat Vectors, and relevant remediation strategies>>


NOTE:	THIS PROGRAM AND ITS DEPENDENCIES ARE TESTED ON 64-BIT UBUNTU 20.04.2.0
		FULLY WORKING ON THE LINUX NOMACHINE SERVER PROVIDED BY
		ROYAL HOLLOWAY, UNIVERSITY OF LONDON AS WELL.


//////////////////////////////////////////////////////////////////////////
SOME STEPS IN THIS README ARE ESSENTIAL TO GET THE PROGRAM RUNNING PROPERLY
PLEASE READ CAREFULLY.
//////////////////////////////////////////////////////////////////////////




SIMPLE STEPS TO RUN THE SOFTWARE (Without external TRNGS):
	1. Run `sudo apt-get install make`
	2. Run `make` inside this directory.
	3. Run the following commands (replace <install directory>)
					with the absolute path to
					/TestU01 generated by the make command):
		export LD_LIBRARY_PATH=<install directory>/mylib:${LD_LIBRARY_PATH}
		export LIBRARY_PATH=<install directory>/mylib:${LIBRARY_PATH}
		export C_INCLUDE_PATH=<install directory>/include:${C_INCLUDE_PATH}
		
		sudo ldconfig
	4. Run `python3 rng_test_suite.py`
	5. Follow the steps in the GUI. (Use /dev/urandom or /dev/random if no TRNG
									is connected)


\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
The information beneath this box is intended to give
a more in-depth look at the files provided in this directory.
\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

GENERAL FILES
-----------------------
Makefile:
	Install `make` using `sudo apt-get install make`
	Then in the RNG-suite directory, run `make`

	This will build all the dependencies and files needed
	in order to run this program successfully.

	NOTE:
	Running `make` after already building the directory may
	return errors. If you are stuck, please resort to
	`make clean` to clean the directory and then
	`make` again to build the directory.

rng_test_suite.py: (Depends on make and ld libraries)
	Run this file after you have performed the make command and
	added the environment variables to path:
		python3 rng_test_suite.py

	A Graphical User Interface (GUI) should guide you through
	the neccessary steps in order to run the tests on the specific
	device.

ffb.py:
	This Python program transforms floats from binary (from file). 
	Which is the needed format in order to run the tests on SmallCrush
	in TestU01.

FipsTesting(.c):
	A compiled C program that runs the FIPS 140-2 tests on a given RNG
	output file. It will return the standard output to the rng_test_suite.py
	program.

SmallCrushTesting(.c):
	A compiled C program that runs the SmallCrush tests on a given RNG
	output file. It will return the standard output to the rng_test_suite.py
	program. This gets its needed specialised input from ffb.py.

ADDITIONAL FILES
-----------------------
tl200:
	This provides the necessary files and kernel admin
	in order to run tests on the Techtronic TL200 TRNG.

	The file structure has been remapped with the make command,
	this allows you to browse only the neccessary file structure
	needed for this project.

	`tl200/linux_64` includes `tlrandom` to add the TL200 device to
	the kernel configuration. It proceeds to add the device to
	/dev/tlrandom.

TestU01:
	This folder includes the necessary libraries of batteries of tests
	in order for us to generate results from the TRNGs.
	
	IMPORTANT:	After running the `make` command in the `RNG-suite` directory
				we need to make sure that we have implemented some important
				environment variables to help our program recognise the
				test libraries and includes.

	The following environment libraries has to be set in your UNIX environment
	manually:
		LD_LIBRARY_PATH    <install directory>/mylib
		LIBRARY_PATH       <install directory>/mylib
		C_INCLUDE_PATH     <install directory>/include

	FOLLOW THESE STEPS CAREFULLY:
		In a Bourne Shell (Your regular Linux shell) proceed with the following
		commands AFTER you have ran `make`.

			export LD_LIBRARY_PATH=<install directory>/mylib:${LD_LIBRARY_PATH}
			export LIBRARY_PATH=<install directory>/mylib:${LIBRARY_PATH}
			export C_INCLUDE_PATH=<install directory>/include:${C_INCLUDE_PATH}		

			sudo ldconfig

		The commands should return nothing in the shell, if successfull.

	Resort to TestU01s own documentation if you are having trouble following
	these steps
		http://simul.iro.umontreal.ca/testu01/install.html
